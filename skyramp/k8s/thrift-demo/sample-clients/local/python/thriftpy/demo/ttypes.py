#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class CartItem(object):
    """
    Attributes:
     - product_id
     - quantity

    """


    def __init__(self, product_id=None, quantity=None,):
        self.product_id = product_id
        self.quantity = quantity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.product_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.quantity = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CartItem')
        if self.product_id is not None:
            oprot.writeFieldBegin('product_id', TType.STRING, 1)
            oprot.writeString(self.product_id.encode('utf-8') if sys.version_info[0] == 2 else self.product_id)
            oprot.writeFieldEnd()
        if self.quantity is not None:
            oprot.writeFieldBegin('quantity', TType.I32, 2)
            oprot.writeI32(self.quantity)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Cart(object):
    """
    Attributes:
     - user_id
     - items

    """


    def __init__(self, user_id=None, items=None,):
        self.user_id = user_id
        self.items = items

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.user_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.items = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = CartItem()
                        _elem5.read(iprot)
                        self.items.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Cart')
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.STRING, 1)
            oprot.writeString(self.user_id.encode('utf-8') if sys.version_info[0] == 2 else self.user_id)
            oprot.writeFieldEnd()
        if self.items is not None:
            oprot.writeFieldBegin('items', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.items))
            for iter6 in self.items:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Product(object):
    """
    Attributes:
     - id
     - name
     - description
     - picture
     - price_usd
     - categories

    """


    def __init__(self, id=None, name=None, description=None, picture=None, price_usd=None, categories=None,):
        self.id = id
        self.name = name
        self.description = description
        self.picture = picture
        self.price_usd = price_usd
        self.categories = categories

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.picture = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.price_usd = Money()
                    self.price_usd.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.categories = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.categories.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Product')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.picture is not None:
            oprot.writeFieldBegin('picture', TType.STRING, 4)
            oprot.writeString(self.picture.encode('utf-8') if sys.version_info[0] == 2 else self.picture)
            oprot.writeFieldEnd()
        if self.price_usd is not None:
            oprot.writeFieldBegin('price_usd', TType.STRUCT, 5)
            self.price_usd.write(oprot)
            oprot.writeFieldEnd()
        if self.categories is not None:
            oprot.writeFieldBegin('categories', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.categories))
            for iter13 in self.categories:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Address(object):
    """
    Attributes:
     - street_address
     - city
     - state
     - country
     - zip_code

    """


    def __init__(self, street_address=None, city=None, state=None, country=None, zip_code=None,):
        self.street_address = street_address
        self.city = city
        self.state = state
        self.country = country
        self.zip_code = zip_code

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.street_address = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.city = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.state = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.country = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.zip_code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Address')
        if self.street_address is not None:
            oprot.writeFieldBegin('street_address', TType.STRING, 1)
            oprot.writeString(self.street_address.encode('utf-8') if sys.version_info[0] == 2 else self.street_address)
            oprot.writeFieldEnd()
        if self.city is not None:
            oprot.writeFieldBegin('city', TType.STRING, 2)
            oprot.writeString(self.city.encode('utf-8') if sys.version_info[0] == 2 else self.city)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRING, 3)
            oprot.writeString(self.state.encode('utf-8') if sys.version_info[0] == 2 else self.state)
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 4)
            oprot.writeString(self.country.encode('utf-8') if sys.version_info[0] == 2 else self.country)
            oprot.writeFieldEnd()
        if self.zip_code is not None:
            oprot.writeFieldBegin('zip_code', TType.I32, 5)
            oprot.writeI32(self.zip_code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Money(object):
    """
    Attributes:
     - currency_code
     - units
     - nanos

    """


    def __init__(self, currency_code=None, units=None, nanos=None,):
        self.currency_code = currency_code
        self.units = units
        self.nanos = nanos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.currency_code = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.units = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.nanos = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Money')
        if self.currency_code is not None:
            oprot.writeFieldBegin('currency_code', TType.STRING, 1)
            oprot.writeString(self.currency_code.encode('utf-8') if sys.version_info[0] == 2 else self.currency_code)
            oprot.writeFieldEnd()
        if self.units is not None:
            oprot.writeFieldBegin('units', TType.I64, 2)
            oprot.writeI64(self.units)
            oprot.writeFieldEnd()
        if self.nanos is not None:
            oprot.writeFieldBegin('nanos', TType.I32, 3)
            oprot.writeI32(self.nanos)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CreditCardInfo(object):
    """
    Attributes:
     - credit_card_number
     - credit_card_cvv
     - credit_card_expiration_year
     - credit_card_expiration_month

    """


    def __init__(self, credit_card_number=None, credit_card_cvv=None, credit_card_expiration_year=None, credit_card_expiration_month=None,):
        self.credit_card_number = credit_card_number
        self.credit_card_cvv = credit_card_cvv
        self.credit_card_expiration_year = credit_card_expiration_year
        self.credit_card_expiration_month = credit_card_expiration_month

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.credit_card_number = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.credit_card_cvv = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.credit_card_expiration_year = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.credit_card_expiration_month = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreditCardInfo')
        if self.credit_card_number is not None:
            oprot.writeFieldBegin('credit_card_number', TType.STRING, 1)
            oprot.writeString(self.credit_card_number.encode('utf-8') if sys.version_info[0] == 2 else self.credit_card_number)
            oprot.writeFieldEnd()
        if self.credit_card_cvv is not None:
            oprot.writeFieldBegin('credit_card_cvv', TType.I32, 2)
            oprot.writeI32(self.credit_card_cvv)
            oprot.writeFieldEnd()
        if self.credit_card_expiration_year is not None:
            oprot.writeFieldBegin('credit_card_expiration_year', TType.I32, 3)
            oprot.writeI32(self.credit_card_expiration_year)
            oprot.writeFieldEnd()
        if self.credit_card_expiration_month is not None:
            oprot.writeFieldBegin('credit_card_expiration_month', TType.I32, 4)
            oprot.writeI32(self.credit_card_expiration_month)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OrderItem(object):
    """
    Attributes:
     - item
     - cost

    """


    def __init__(self, item=None, cost=None,):
        self.item = item
        self.cost = cost

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.item = CartItem()
                    self.item.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cost = Money()
                    self.cost.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OrderItem')
        if self.item is not None:
            oprot.writeFieldBegin('item', TType.STRUCT, 1)
            self.item.write(oprot)
            oprot.writeFieldEnd()
        if self.cost is not None:
            oprot.writeFieldBegin('cost', TType.STRUCT, 2)
            self.cost.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OrderResult(object):
    """
    Attributes:
     - order_id
     - shipping_tracking_id
     - shipping_cost
     - shipping_address
     - items

    """


    def __init__(self, order_id=None, shipping_tracking_id=None, shipping_cost=None, shipping_address=None, items=None,):
        self.order_id = order_id
        self.shipping_tracking_id = shipping_tracking_id
        self.shipping_cost = shipping_cost
        self.shipping_address = shipping_address
        self.items = items

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.order_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.shipping_tracking_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.shipping_cost = Money()
                    self.shipping_cost.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.shipping_address = Address()
                    self.shipping_address.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.items = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = OrderItem()
                        _elem19.read(iprot)
                        self.items.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OrderResult')
        if self.order_id is not None:
            oprot.writeFieldBegin('order_id', TType.STRING, 1)
            oprot.writeString(self.order_id.encode('utf-8') if sys.version_info[0] == 2 else self.order_id)
            oprot.writeFieldEnd()
        if self.shipping_tracking_id is not None:
            oprot.writeFieldBegin('shipping_tracking_id', TType.STRING, 2)
            oprot.writeString(self.shipping_tracking_id.encode('utf-8') if sys.version_info[0] == 2 else self.shipping_tracking_id)
            oprot.writeFieldEnd()
        if self.shipping_cost is not None:
            oprot.writeFieldBegin('shipping_cost', TType.STRUCT, 3)
            self.shipping_cost.write(oprot)
            oprot.writeFieldEnd()
        if self.shipping_address is not None:
            oprot.writeFieldBegin('shipping_address', TType.STRUCT, 4)
            self.shipping_address.write(oprot)
            oprot.writeFieldEnd()
        if self.items is not None:
            oprot.writeFieldBegin('items', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.items))
            for iter20 in self.items:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Ad(object):
    """
    Attributes:
     - redirect_url
     - text

    """


    def __init__(self, redirect_url=None, text=None,):
        self.redirect_url = redirect_url
        self.text = text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.redirect_url = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Ad')
        if self.redirect_url is not None:
            oprot.writeFieldBegin('redirect_url', TType.STRING, 1)
            oprot.writeString(self.redirect_url.encode('utf-8') if sys.version_info[0] == 2 else self.redirect_url)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 2)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CartItem)
CartItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'product_id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'quantity', None, None, ),  # 2
)
all_structs.append(Cart)
Cart.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'user_id', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'items', (TType.STRUCT, [CartItem, None], False), None, ),  # 2
)
all_structs.append(Product)
Product.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'picture', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'price_usd', [Money, None], None, ),  # 5
    (6, TType.LIST, 'categories', (TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(Address)
Address.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'street_address', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'city', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'state', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'country', 'UTF8', None, ),  # 4
    (5, TType.I32, 'zip_code', None, None, ),  # 5
)
all_structs.append(Money)
Money.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'currency_code', 'UTF8', None, ),  # 1
    (2, TType.I64, 'units', None, None, ),  # 2
    (3, TType.I32, 'nanos', None, None, ),  # 3
)
all_structs.append(CreditCardInfo)
CreditCardInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'credit_card_number', 'UTF8', None, ),  # 1
    (2, TType.I32, 'credit_card_cvv', None, None, ),  # 2
    (3, TType.I32, 'credit_card_expiration_year', None, None, ),  # 3
    (4, TType.I32, 'credit_card_expiration_month', None, None, ),  # 4
)
all_structs.append(OrderItem)
OrderItem.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'item', [CartItem, None], None, ),  # 1
    (2, TType.STRUCT, 'cost', [Money, None], None, ),  # 2
)
all_structs.append(OrderResult)
OrderResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'order_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'shipping_tracking_id', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'shipping_cost', [Money, None], None, ),  # 3
    (4, TType.STRUCT, 'shipping_address', [Address, None], None, ),  # 4
    (5, TType.LIST, 'items', (TType.STRUCT, [OrderItem, None], False), None, ),  # 5
)
all_structs.append(Ad)
Ad.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'redirect_url', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'text', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs

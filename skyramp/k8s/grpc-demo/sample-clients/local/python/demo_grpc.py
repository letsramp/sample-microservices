# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: demo.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import demo_pb2


class CartServiceBase(abc.ABC):

    @abc.abstractmethod
    async def AddItem(self, stream: 'grpclib.server.Stream[demo_pb2.AddItemRequest, demo_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def GetCart(self, stream: 'grpclib.server.Stream[demo_pb2.GetCartRequest, demo_pb2.Cart]') -> None:
        pass

    @abc.abstractmethod
    async def EmptyCart(self, stream: 'grpclib.server.Stream[demo_pb2.EmptyCartRequest, demo_pb2.Empty]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/hipstershop.CartService/AddItem': grpclib.const.Handler(
                self.AddItem,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.AddItemRequest,
                demo_pb2.Empty,
            ),
            '/hipstershop.CartService/GetCart': grpclib.const.Handler(
                self.GetCart,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.GetCartRequest,
                demo_pb2.Cart,
            ),
            '/hipstershop.CartService/EmptyCart': grpclib.const.Handler(
                self.EmptyCart,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.EmptyCartRequest,
                demo_pb2.Empty,
            ),
        }


class CartServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AddItem = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.CartService/AddItem',
            demo_pb2.AddItemRequest,
            demo_pb2.Empty,
        )
        self.GetCart = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.CartService/GetCart',
            demo_pb2.GetCartRequest,
            demo_pb2.Cart,
        )
        self.EmptyCart = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.CartService/EmptyCart',
            demo_pb2.EmptyCartRequest,
            demo_pb2.Empty,
        )


class RecommendationServiceBase(abc.ABC):

    @abc.abstractmethod
    async def ListRecommendations(self, stream: 'grpclib.server.Stream[demo_pb2.ListRecommendationsRequest, demo_pb2.ListRecommendationsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/hipstershop.RecommendationService/ListRecommendations': grpclib.const.Handler(
                self.ListRecommendations,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.ListRecommendationsRequest,
                demo_pb2.ListRecommendationsResponse,
            ),
        }


class RecommendationServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListRecommendations = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.RecommendationService/ListRecommendations',
            demo_pb2.ListRecommendationsRequest,
            demo_pb2.ListRecommendationsResponse,
        )


class ProductCatalogServiceBase(abc.ABC):

    @abc.abstractmethod
    async def ListProducts(self, stream: 'grpclib.server.Stream[demo_pb2.Empty, demo_pb2.ListProductsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetProduct(self, stream: 'grpclib.server.Stream[demo_pb2.GetProductRequest, demo_pb2.Product]') -> None:
        pass

    @abc.abstractmethod
    async def SearchProducts(self, stream: 'grpclib.server.Stream[demo_pb2.SearchProductsRequest, demo_pb2.SearchProductsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/hipstershop.ProductCatalogService/ListProducts': grpclib.const.Handler(
                self.ListProducts,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.Empty,
                demo_pb2.ListProductsResponse,
            ),
            '/hipstershop.ProductCatalogService/GetProduct': grpclib.const.Handler(
                self.GetProduct,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.GetProductRequest,
                demo_pb2.Product,
            ),
            '/hipstershop.ProductCatalogService/SearchProducts': grpclib.const.Handler(
                self.SearchProducts,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.SearchProductsRequest,
                demo_pb2.SearchProductsResponse,
            ),
        }


class ProductCatalogServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListProducts = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.ProductCatalogService/ListProducts',
            demo_pb2.Empty,
            demo_pb2.ListProductsResponse,
        )
        self.GetProduct = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.ProductCatalogService/GetProduct',
            demo_pb2.GetProductRequest,
            demo_pb2.Product,
        )
        self.SearchProducts = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.ProductCatalogService/SearchProducts',
            demo_pb2.SearchProductsRequest,
            demo_pb2.SearchProductsResponse,
        )


class ShippingServiceBase(abc.ABC):

    @abc.abstractmethod
    async def GetQuote(self, stream: 'grpclib.server.Stream[demo_pb2.GetQuoteRequest, demo_pb2.GetQuoteResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ShipOrder(self, stream: 'grpclib.server.Stream[demo_pb2.ShipOrderRequest, demo_pb2.ShipOrderResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/hipstershop.ShippingService/GetQuote': grpclib.const.Handler(
                self.GetQuote,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.GetQuoteRequest,
                demo_pb2.GetQuoteResponse,
            ),
            '/hipstershop.ShippingService/ShipOrder': grpclib.const.Handler(
                self.ShipOrder,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.ShipOrderRequest,
                demo_pb2.ShipOrderResponse,
            ),
        }


class ShippingServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetQuote = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.ShippingService/GetQuote',
            demo_pb2.GetQuoteRequest,
            demo_pb2.GetQuoteResponse,
        )
        self.ShipOrder = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.ShippingService/ShipOrder',
            demo_pb2.ShipOrderRequest,
            demo_pb2.ShipOrderResponse,
        )


class CurrencyServiceBase(abc.ABC):

    @abc.abstractmethod
    async def GetSupportedCurrencies(self, stream: 'grpclib.server.Stream[demo_pb2.Empty, demo_pb2.GetSupportedCurrenciesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Convert(self, stream: 'grpclib.server.Stream[demo_pb2.CurrencyConversionRequest, demo_pb2.Money]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/hipstershop.CurrencyService/GetSupportedCurrencies': grpclib.const.Handler(
                self.GetSupportedCurrencies,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.Empty,
                demo_pb2.GetSupportedCurrenciesResponse,
            ),
            '/hipstershop.CurrencyService/Convert': grpclib.const.Handler(
                self.Convert,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.CurrencyConversionRequest,
                demo_pb2.Money,
            ),
        }


class CurrencyServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetSupportedCurrencies = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.CurrencyService/GetSupportedCurrencies',
            demo_pb2.Empty,
            demo_pb2.GetSupportedCurrenciesResponse,
        )
        self.Convert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.CurrencyService/Convert',
            demo_pb2.CurrencyConversionRequest,
            demo_pb2.Money,
        )


class PaymentServiceBase(abc.ABC):

    @abc.abstractmethod
    async def Charge(self, stream: 'grpclib.server.Stream[demo_pb2.ChargeRequest, demo_pb2.ChargeResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/hipstershop.PaymentService/Charge': grpclib.const.Handler(
                self.Charge,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.ChargeRequest,
                demo_pb2.ChargeResponse,
            ),
        }


class PaymentServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Charge = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.PaymentService/Charge',
            demo_pb2.ChargeRequest,
            demo_pb2.ChargeResponse,
        )


class EmailServiceBase(abc.ABC):

    @abc.abstractmethod
    async def SendOrderConfirmation(self, stream: 'grpclib.server.Stream[demo_pb2.SendOrderConfirmationRequest, demo_pb2.Empty]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/hipstershop.EmailService/SendOrderConfirmation': grpclib.const.Handler(
                self.SendOrderConfirmation,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.SendOrderConfirmationRequest,
                demo_pb2.Empty,
            ),
        }


class EmailServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.SendOrderConfirmation = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.EmailService/SendOrderConfirmation',
            demo_pb2.SendOrderConfirmationRequest,
            demo_pb2.Empty,
        )


class CheckoutServiceBase(abc.ABC):

    @abc.abstractmethod
    async def PlaceOrder(self, stream: 'grpclib.server.Stream[demo_pb2.PlaceOrderRequest, demo_pb2.PlaceOrderResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/hipstershop.CheckoutService/PlaceOrder': grpclib.const.Handler(
                self.PlaceOrder,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.PlaceOrderRequest,
                demo_pb2.PlaceOrderResponse,
            ),
        }


class CheckoutServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.PlaceOrder = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.CheckoutService/PlaceOrder',
            demo_pb2.PlaceOrderRequest,
            demo_pb2.PlaceOrderResponse,
        )


class AdServiceBase(abc.ABC):

    @abc.abstractmethod
    async def GetAds(self, stream: 'grpclib.server.Stream[demo_pb2.AdRequest, demo_pb2.AdResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/hipstershop.AdService/GetAds': grpclib.const.Handler(
                self.GetAds,
                grpclib.const.Cardinality.UNARY_UNARY,
                demo_pb2.AdRequest,
                demo_pb2.AdResponse,
            ),
        }


class AdServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetAds = grpclib.client.UnaryUnaryMethod(
            channel,
            '/hipstershop.AdService/GetAds',
            demo_pb2.AdRequest,
            demo_pb2.AdResponse,
        )

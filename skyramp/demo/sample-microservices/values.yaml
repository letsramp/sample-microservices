# Default values for sample-microservices.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

adService:
  create: true
  name: ad-service
  image: 
    repository: public.ecr.aws/j1n2c2p2/microservices-demo/adservice
    tag: v0.3.9
  servicePort: 9555
  containerPort: 9555
  protocol: TCP 

cartService:
  create: true
  name: cart-service
  image: 
    repository: public.ecr.aws/j1n2c2p2/microservices-demo/cartservice
    tag: v0.3.9
  servicePort: 7070
  containerPort: 7070
  protocol: TCP 
  
checkoutService:
  create: true
  name: checkout-service
  image: 
    repository: public.ecr.aws/j1n2c2p2/microservices-demo/checkoutservice
    tag: v0.3.9
  servicePort: 5050
  containerPort: 5050
  protocol: TCP

currencyService:
  create: true
  name: currency-service
  image: 
    repository: public.ecr.aws/j1n2c2p2/microservices-demo/currencyservice
    tag: v0.3.9
  servicePort: 7000
  containerPort: 7000
  protocol: TCP

emailService:
  create: true
  name: email-service
  image: 
    repository: public.ecr.aws/j1n2c2p2/microservices-demo/emailservice
    tag: v0.3.9
  servicePort: 5000
  containerPort: 5000

frontend:
  create: true
  name: frontend
  image: 
    repository: public.ecr.aws/j1n2c2p2/microservices-demo/frontend
    tag: v0.3.9
  servicePort: 80
  containerPort: 80
  protocol: TCP

paymentService:
  create: true
  name: payment-service
  image: 
    repository: public.ecr.aws/j1n2c2p2/microservices-demo/paymentservice
    tag: v0.3.9
  servicePort: 50051
  containerPort: 50051
  protocol: TCP

productCatalogService:
  create: true
  name: product-catalog-service
  image: 
    repository: public.ecr.aws/j1n2c2p2/microservices-demo/productcatalogservice
    tag: v0.3.9
  servicePort: 3550
  containerPort: 3550
  protocol: TCP

recommendationService:
  create: true
  name: recommendation-service
  image: 
    repository: public.ecr.aws/j1n2c2p2/microservices-demo/recommendationservice
    tag: v0.3.9
  servicePort: 8080
  containerPort: 8080
  protocol: TCP

shippingService:
  create: true
  name: shipping-service
  image: 
    repository: public.ecr.aws/j1n2c2p2/microservices-demo/shippingservice
    tag: v0.3.9
  servicePort: 50051
  containerPort: 50051
  protocol: TCP

cartDatabase:
    create: true
    name: redis
    image: 
      repository: redis
      tag: alpine
    servicePort:  6379
    containerPort: 6379
    protocol: TCP